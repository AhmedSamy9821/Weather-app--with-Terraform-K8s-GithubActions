name: CD pipline
on:
  workflow_dispatch:
      
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: eu-north-1

    - name: join the eks cluster
      run: aws eks --region eu-north-1 update-kubeconfig --name weather-cluster-dev

    - name: install nginx ingress controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/cloud/deploy.yaml
        kubectl wait --namespace ingress-nginx \
        --for=condition=ready pod \
        --selector=app.kubernetes.io/component=controller \
        --timeout=120s
        kubectl get pods --namespace=ingress-nginx


    - name: Create mysql-secret
      run: kubectl create secret generic mysql-secret  --from-literal=root-password='${{secrets.MYSQL_ROOT_PASSWORD}}' --from-literal=auth-password='${{secrets.MYSQL_AUTH_PASSWORD}}' --from-literal=secret-key='${{secrets.AUTH_SECRET_KEY}}'
      continue-on-error: true

    - name: deploy mysql
      run: |
        kubectl apply -f ./Kubernetes/auth/mysql/mysql_sc.yml
        kubectl apply -f ./Kubernetes/auth/mysql/mysql_service.yml
        kubectl apply -f ./Kubernetes/auth/mysql/mysql_statfulset.yml
        kubectl get pods 
        kubectl get svc
    
    - name: Run the init job to create the auth service user
      run: |
        kubectl wait --for=condition=ready pod/mysql-0 --timeout=120s
        sleep 30
        kubectl apply -f ./Kubernetes/auth/mysql/mysql-init-job.yml
        kubectl get pods 
     # ensure that the job has completed

    - name: Ensure that our user has access to the weahterapp database
      run: |
        kubectl wait --for=condition=Complete job/mysql-init-job
        kubectl exec -it mysql-0 -- mysql -u authuser -p${{secrets.MYSQL_AUTH_PASSWORD}} -e "SHOW DATABASES; USE weatherapp; SHOW TABLES;"

    - name: deploy auth service
      run: |
        kubectl apply -f ./Kubernetes/auth/auth_deployment.yml
        kubectl apply -f ./Kubernetes/auth/auth_service.yml
        kubectl get pods 
        kubectl get svc

   # - name: Test that the auth service is running
    #  run: |
     #   kubectl run alpine --rm -it --image=curlimages/curl:latest -- curl -X POST http://weatherapp-auth:8080/users -H "Content-Type: application/json" -d '{"user_name": "backendtest", "user_password": "testpassword"}'

    - name: deploy backend service
      run: |
        kubectl apply -f ./Kubernetes/backend/weather_secret.yml
        kubectl apply -f ./Kubernetes/backend/backend_deployment.yml
        kubectl apply -f ./Kubernetes/backend/backend_service.yml
        kubectl wait --for=condition=available deployment/weatherapp-backend 
        kubectl get pods 
        kubectl get svc

    - name: deploy UI service
      run: |
        kubectl apply -f ./Kubernetes/UI/ui_deployment.yml
        kubectl apply -f ./Kubernetes/UI/ui_service.yml
        kubectl apply -f ./Kubernetes/UI/ui_ingress.yml
        kubectl wait --for=condition=available deployment/weatherapp-ui
        kubectl get pods 
        kubectl get svc
    
    - name: attach the ingress load balancer with domain and encrypt the traffic using https
      run: |
        HttpInstancePort=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.spec.ports[0].nodePort}')
        echo $HttpInstancePort
        CERT_ARN=$(aws acm list-certificates --query "CertificateSummaryList[?DomainName=='dev.weather.ahmedsamy.link'].CertificateArn" --output text)
        echo $CERT_ARN
        DNS_Name=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' --output text)
        echo $DNS_Name
        LB_Name=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[?DNSName=='$DNS_Name'].LoadBalancerName" --output text)
        echo $LB_ARN
        
        aws elb delete-load-balancer-listeners --load-balancer-name $LB_Name --load-balancer-ports 443
        aws elb create-load-balancer-listeners --load-balancer-name $LB_Name --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=$HttpInstancePort,SSLCertificateId=$CERT_ARN
        
        HostedZone=$(aws route53 list-hosted-zones-by-name --dns-name "ahmedsamy.link" --query "HostedZones[0].Id" --output text)
        LB_hostedzone=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?DNSName=='<DNS_NAME>'].CanonicalHostedZoneId" --output text)

        aws route53 change-resource-record-sets \
        --hosted-zone-id $HostedZone \
        --change-batch '{
          "Changes": [
             {
        "Action": "CREATE",
        "ResourceRecordSet": {
          "Name": "dev.weather.ahmedsamy.link",
          "Type": "A",
          "AliasTarget": {
            "HostedZoneId": "$LB_hostedzone",
            "DNSName": "$DNS_Name",
            "EvaluateTargetHealth": false
          }
        }
      }
    ]
  }'
