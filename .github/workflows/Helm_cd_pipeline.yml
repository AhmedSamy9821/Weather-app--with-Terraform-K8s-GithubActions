name: Helm CD pipline
on:
  workflow_dispatch:
    inputs:
            env:
                description: Environment
                required: true
                type: choice
                options:
                    - prod
                    - dev
      
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: eu-north-1

    - name: join the eks cluster
      run: aws eks --region eu-north-1 update-kubeconfig --name weather-cluster-${{inputs.env}} 

    - name: install nginx ingress controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/cloud/deploy.yaml
        kubectl wait --namespace ingress-nginx \
        --for=condition=ready pod \
        --selector=app.kubernetes.io/component=controller \
        --timeout=120s
        kubectl get pods --namespace=ingress-nginx


    - name: Create mysql-secret
      run: kubectl create secret generic mysql-secret  --from-literal=root-password='${{secrets.MYSQL_ROOT_PASSWORD}}' --from-literal=auth-password='${{secrets.MYSQL_AUTH_PASSWORD}}' --from-literal=secret-key='${{secrets.AUTH_SECRET_KEY}}'
      continue-on-error: true

    - name: deploy mysql
      run: |
        helm install mysql-microservice-1 ./Kubernetes/Helm/auth/mysql/mysql-microservice --wait
        kubectl get pods 
        kubectl get svc

    - name: deploy Auth microservice
      run: |
        helm install auth-microservice-1 ./Kubernetes/Helm/auth/Auth-microservice --wait
        kubectl get pods 
        kubectl get svc
    
    - name: deploy UI microservice
      run: |
        helm install backend-microservice-1 ./Kubernetes/Helm/backend/backend-microservice --set apikey='${{secrets.APIKEY}}' --wait
        kubectl get pods 
        kubectl get svc

    - name: deploy backend microservice
      run: |
        helm install ui-microservice-1 ./Kubernetes/Helm/UI/ui-microservice  --wait
        kubectl get pods 
        kubectl get svc

    - name: create record for domain
      run: |
        HostedZone=$(aws route53 list-hosted-zones-by-name --dns-name "ahmedsamy.link" --query "HostedZones[0].Id" --output text)
        DNS_Name=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        LB_hostedzone=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[?DNSName=='$DNS_Name'].CanonicalHostedZoneNameID" --output text)
        domain=$([ "${{inputs.env}}" = "dev" ] && echo "dev.weather.ahmedsamy.link" || echo "weather.ahmedsamy.link")
        aws route53 change-resource-record-sets \
        --hosted-zone-id $HostedZone \
        --change-batch '{
            "Changes": [
                {
                    "Action": "CREATE",
                    "ResourceRecordSet": {
                    "Name": "'$domain'",
                    "Type": "A",
                    "AliasTarget": {
                    "HostedZoneId": "'$LB_hostedzone'",
                    "DNSName": "'$DNS_Name'",
                    "EvaluateTargetHealth": false
                    }
                    }
                }
                ]
        }'
        
    - name: Encrypt the traffic between client and aws load balance using https
      run: |
        domain=$([ "${{inputs.env}}" = "dev" ] && echo "dev.weather.ahmedsamy.link" || echo "weather.ahmedsamy.link")
        HttpInstancePort=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.spec.ports[0].nodePort}')
        CERT_ARN=$(aws acm list-certificates --query "CertificateSummaryList[?DomainName=='$domain'].CertificateArn" --output text)
        DNS_Name=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        LB_Name=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[?DNSName=='$DNS_Name'].LoadBalancerName" --output text)

        aws elb delete-load-balancer-listeners --load-balancer-name $LB_Name --load-balancer-ports 443
        aws elb delete-load-balancer-listeners --load-balancer-name $LB_Name --load-balancer-ports 80
        aws elb create-load-balancer-listeners --load-balancer-name $LB_Name --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=$HttpInstancePort,SSLCertificateId=$CERT_ARN
        

